<?php

namespace App\Filament\Imports;

use App\Models\Macro;
use Filament\Actions\Imports\ImportColumn;
use Filament\Actions\Imports\Importer;
use Filament\Actions\Imports\Models\Import;

class MacroImporter extends Importer
{
    protected static ?string $model = Macro::class;

    public static function getColumns(): array
    {
        return [
            ImportColumn::make('name')
                ->rules(['required', 'max:255']),
            ImportColumn::make('flag')
                ->rules(['max:255']),
            ImportColumn::make('real_gdp_growth_py_2')
                ->numeric()
                ->rules(['integer']),
            ImportColumn::make('real_gdp_growth_py_1')
                ->numeric()
                ->rules(['integer']),
            ImportColumn::make('real_gdp_growth_py')
                ->numeric()
                ->rules(['integer']),
            ImportColumn::make('real_gdp_growth_cy')
                ->numeric()
                ->rules(['integer']),
            ImportColumn::make('real_gdp_growth_cy_1')
                ->numeric()
                ->rules(['integer']),
            ImportColumn::make('real_hydrocarbon_growth_py_2')
                ->numeric()
                ->rules(['integer']),
            ImportColumn::make('real_hydrocarbon_growth_py_1')
                ->numeric()
                ->rules(['integer']),
            ImportColumn::make('real_hydrocarbon_growth_py')
                ->numeric()
                ->rules(['integer']),
            ImportColumn::make('real_hydrocarbon_growth_cy')
                ->numeric()
                ->rules(['integer']),
            ImportColumn::make('real_hydrocarbon_growth_cy_1')
                ->numeric()
                ->rules(['integer']),
            ImportColumn::make('real_non_hydrocarbon_growth_py_2')
                ->numeric()
                ->rules(['integer']),
            ImportColumn::make('real_non_hydrocarbon_growth_py_1')
                ->numeric()
                ->rules(['integer']),
            ImportColumn::make('real_non_hydrocarbon_growth_py')
                ->numeric()
                ->rules(['integer']),
            ImportColumn::make('real_non_hydrocarbon_growth_cy')
                ->numeric()
                ->rules(['integer']),
            ImportColumn::make('real_non_hydrocarbon_growth_cy_1')
                ->numeric()
                ->rules(['integer']),
            ImportColumn::make('gdp_per_capita_py_2')
                ->numeric()
                ->rules(['integer']),
            ImportColumn::make('gdp_per_capita_py_1')
                ->numeric()
                ->rules(['integer']),
            ImportColumn::make('gdp_per_capita_py')
                ->numeric()
                ->rules(['integer']),
            ImportColumn::make('gdp_per_capita_cy')
                ->numeric()
                ->rules(['integer']),
            ImportColumn::make('gdp_per_capita_cy_1')
                ->numeric()
                ->rules(['integer']),
            ImportColumn::make('population_py_2')
                ->numeric()
                ->rules(['integer']),
            ImportColumn::make('population_py_1')
                ->numeric()
                ->rules(['integer']),
            ImportColumn::make('population_py')
                ->numeric()
                ->rules(['integer']),
            ImportColumn::make('population_cy')
                ->numeric()
                ->rules(['integer']),
            ImportColumn::make('population_cy_1')
                ->numeric()
                ->rules(['integer']),
            ImportColumn::make('unemployment_rate_py_2')
                ->numeric()
                ->rules(['integer']),
            ImportColumn::make('unemployment_rate_py_1')
                ->numeric()
                ->rules(['integer']),
            ImportColumn::make('unemployment_rate_py')
                ->numeric()
                ->rules(['integer']),
            ImportColumn::make('unemployment_rate_cy')
                ->numeric()
                ->rules(['integer']),
            ImportColumn::make('unemployment_rate_cy_1')
                ->numeric()
                ->rules(['integer']),
            ImportColumn::make('government_revenues_py_2')
                ->numeric()
                ->rules(['integer']),
            ImportColumn::make('government_revenues_py_1')
                ->numeric()
                ->rules(['integer']),
            ImportColumn::make('government_revenues_py')
                ->numeric()
                ->rules(['integer']),
            ImportColumn::make('government_revenues_cy')
                ->numeric()
                ->rules(['integer']),
            ImportColumn::make('government_revenues_cy_1')
                ->numeric()
                ->rules(['integer']),
            ImportColumn::make('government_expenditure_py_2')
                ->numeric()
                ->rules(['integer']),
            ImportColumn::make('government_expenditure_py_1')
                ->numeric()
                ->rules(['integer']),
            ImportColumn::make('government_expenditure_py')
                ->numeric()
                ->rules(['integer']),
            ImportColumn::make('government_expenditure_cy')
                ->numeric()
                ->rules(['integer']),
            ImportColumn::make('government_expenditure_cy_1')
                ->numeric()
                ->rules(['integer']),
            ImportColumn::make('fiscal_balance_py_2')
                ->numeric()
                ->rules(['integer']),
            ImportColumn::make('fiscal_balance_py_1')
                ->numeric()
                ->rules(['integer']),
            ImportColumn::make('fiscal_balance_py')
                ->numeric()
                ->rules(['integer']),
            ImportColumn::make('fiscal_balance_cy')
                ->numeric()
                ->rules(['integer']),
            ImportColumn::make('fiscal_balance_cy_1')
                ->numeric()
                ->rules(['integer']),
            ImportColumn::make('debit_py_2')
                ->numeric()
                ->rules(['integer']),
            ImportColumn::make('debit_py_1')
                ->numeric()
                ->rules(['integer']),
            ImportColumn::make('debit_py')
                ->numeric()
                ->rules(['integer']),
            ImportColumn::make('debit_cy')
                ->numeric()
                ->rules(['integer']),
            ImportColumn::make('debit_cy_1')
                ->numeric()
                ->rules(['integer']),
            ImportColumn::make('trade_balance_py_2')
                ->numeric()
                ->rules(['integer']),
            ImportColumn::make('trade_balance_py_1')
                ->numeric()
                ->rules(['integer']),
            ImportColumn::make('trade_balance_py')
                ->numeric()
                ->rules(['integer']),
            ImportColumn::make('trade_balance_cy')
                ->numeric()
                ->rules(['integer']),
            ImportColumn::make('trade_balance_cy_1')
                ->numeric()
                ->rules(['integer']),
            ImportColumn::make('hydrocarbon_exports_py_2')
                ->numeric()
                ->rules(['integer']),
            ImportColumn::make('hydrocarbon_exports_py_1')
                ->numeric()
                ->rules(['integer']),
            ImportColumn::make('hydrocarbon_exports_py')
                ->numeric()
                ->rules(['integer']),
            ImportColumn::make('hydrocarbon_exports_cy')
                ->numeric()
                ->rules(['integer']),
            ImportColumn::make('hydrocarbon_exports_cy_1')
                ->numeric()
                ->rules(['integer']),
            ImportColumn::make('current_account_balance_py_2')
                ->numeric()
                ->rules(['integer']),
            ImportColumn::make('current_account_balance_py_1')
                ->numeric()
                ->rules(['integer']),
            ImportColumn::make('current_account_balance_py')
                ->numeric()
                ->rules(['integer']),
            ImportColumn::make('current_account_balance_cy')
                ->numeric()
                ->rules(['integer']),
            ImportColumn::make('current_account_balance_cy_1')
                ->numeric()
                ->rules(['integer']),
            ImportColumn::make('current_account_balance_gdp_py_2')
                ->numeric()
                ->rules(['integer']),
            ImportColumn::make('current_account_balance_gdp_py_1')
                ->numeric()
                ->rules(['integer']),
            ImportColumn::make('current_account_balance_gdp_py')
                ->numeric()
                ->rules(['integer']),
            ImportColumn::make('current_account_balance_gdp_cy')
                ->numeric()
                ->rules(['integer']),
            ImportColumn::make('current_account_balance_gdp_cy_1')
                ->numeric()
                ->rules(['integer']),
            ImportColumn::make('inflation_py_2')
                ->numeric()
                ->rules(['integer']),
            ImportColumn::make('inflation_py_1')
                ->numeric()
                ->rules(['integer']),
            ImportColumn::make('inflation_py')
                ->numeric()
                ->rules(['integer']),
            ImportColumn::make('inflation_cy')
                ->numeric()
                ->rules(['integer']),
            ImportColumn::make('inflation_cy_1')
                ->numeric()
                ->rules(['integer']),
            ImportColumn::make('private_sector_credit_growth_py_2')
                ->numeric()
                ->rules(['integer']),
            ImportColumn::make('private_sector_credit_growth_py_1')
                ->numeric()
                ->rules(['integer']),
            ImportColumn::make('private_sector_credit_growth_py')
                ->numeric()
                ->rules(['integer']),
            ImportColumn::make('private_sector_credit_growth_cy')
                ->numeric()
                ->rules(['integer']),
            ImportColumn::make('private_sector_credit_growth_cy_1')
                ->numeric()
                ->rules(['integer']),
            ImportColumn::make('discount_rate_py_2')
                ->numeric()
                ->rules(['integer']),
            ImportColumn::make('discount_rate_py_1')
                ->numeric()
                ->rules(['integer']),
            ImportColumn::make('discount_rate_py')
                ->numeric()
                ->rules(['integer']),
            ImportColumn::make('discount_rate_cy')
                ->numeric()
                ->rules(['integer']),
            ImportColumn::make('discount_rate_cy_1')
                ->numeric()
                ->rules(['integer']),
            ImportColumn::make('oil_production_py_2')
                ->numeric()
                ->rules(['integer']),
            ImportColumn::make('oil_production_py_1')
                ->numeric()
                ->rules(['integer']),
            ImportColumn::make('oil_production_py')
                ->numeric()
                ->rules(['integer']),
            ImportColumn::make('oil_production_cy')
                ->numeric()
                ->rules(['integer']),
            ImportColumn::make('oil_production_cy_1')
                ->numeric()
                ->rules(['integer']),
            ImportColumn::make('brent_price_py_2')
                ->numeric()
                ->rules(['integer']),
            ImportColumn::make('brent_price_py_1')
                ->numeric()
                ->rules(['integer']),
            ImportColumn::make('brent_price_py')
                ->numeric()
                ->rules(['integer']),
            ImportColumn::make('brent_price_cy')
                ->numeric()
                ->rules(['integer']),
            ImportColumn::make('brent_price_cy_1')
                ->numeric()
                ->rules(['integer']),
            ImportColumn::make('natural_gas_production_py_2')
                ->numeric()
                ->rules(['integer']),
            ImportColumn::make('natural_gas_production_py_1')
                ->numeric()
                ->rules(['integer']),
            ImportColumn::make('natural_gas_production_py')
                ->numeric()
                ->rules(['integer']),
            ImportColumn::make('natural_gas_production_cy')
                ->numeric()
                ->rules(['integer']),
            ImportColumn::make('natural_gas_production_cy_1')
                ->numeric()
                ->rules(['integer']),
            ImportColumn::make('source'),
            ImportColumn::make('note'),
            ImportColumn::make('currency')
                ->rules(['max:255']),
        ];
    }

    public function resolveRecord(): ?Macro
    {
        // return Macro::firstOrNew([
        //     // Update existing records, matching them by `$this->data['column_name']`
        //     'email' => $this->data['email'],
        // ]);

        return new Macro();
    }

    public static function getCompletedNotificationBody(Import $import): string
    {
        $body = 'Your macro import has completed and ' . number_format($import->successful_rows) . ' ' . str('row')->plural($import->successful_rows) . ' imported.';

        if ($failedRowsCount = $import->getFailedRowsCount()) {
            $body .= ' ' . number_format($failedRowsCount) . ' ' . str('row')->plural($failedRowsCount) . ' failed to import.';
        }

        return $body;
    }
}
